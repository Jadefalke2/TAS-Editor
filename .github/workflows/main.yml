# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  release:
    types: [ published ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Java JDK
        uses: actions/setup-java@v2.1.0
        with:
          distribution: 'zulu'
          java-version: '15'
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: prepare environment
        run: mkdir buildout

      # Runs a single command using the runners shell
      - name: building source to .class files
        run: javac -d buildout -cp src/main/java/ -cp lib/flatlaf.jar -sourcepath src/main/java ./src/main/java/io/github/jadefalke2/TAS.java

      # Runs a set of commands using the runners shell
      - name: unpacking library in buildout dir
        run: |
          cd buildout
          jar -xf ../lib/flatlaf.jar
          cd ..
          
      - name: building the final jar
        run: jar -cfm TAS-Editor.jar src/main/java/META-INF/MANIFEST.MF -C buildout .
        
    
    
      - name: Get the upload URL for a release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./TAS-Editor.jar
          asset_name: TAS-Editor.jar
          asset_content_type: application/java-archive
